package fmuvb.demo;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import fmu.VehicleBatteryFMU;
import fmumodel.FMU;
import fmumodel.Input;

public class SimulationEnv implements Serializable {

   static final long serialVersionUID = 5235136950L;

   public static Map<String, Integer> outputToIndices = null;

   public static Map<String, Integer> inputToIndices = null;
   private static VehicleBatteryFMU testFMU = null;
   public static int simulationTime = 2474;

   public static double calcAuxload(final double batteryVoltage, final double maxTorque) {
      return 600 + (batteryVoltage - 340) * 2 + (maxTorque - 500) * 0.75;
   }

   public static double calcMaxPower(final double batteryVoltage, final double internalRes) {
      return 100000 - internalRes * 100000 + batteryVoltage * 100;
   }

   public static double getSoC(final FMU vb) {
      return vb.getOutput().get(outputToIndices.get("SoC")).getValue();
   }

   public static double getTotalBatteryLosses(final FMU vb) {
      return vb.getOutput().get(outputToIndices.get("TotalBatteryLosses")).getValue();
   }

   public static double getTotalTractiveEnergy(final FMU fmu) {
      final Map<String, Double> inputs = fmu.getInput().stream()
            .collect(Collectors.toMap(Input::getName, Input::getValue));

      if(outputToIndices == null) {
         System.out.println("Create output indices...");
         SimulationEnv.outputToIndices = new HashMap<>();
         SimulationEnv.inputToIndices = new HashMap<>();

         for(int i = 0; i < vb.getOutputs().size(); i++) {
            SimulationEnv.outputToIndices.put(vb.getOutputs().get(i).getName(), i);
         }
         for(int i = 0; i < vb.getInputs().size(); i++) {
            SimulationEnv.inputToIndices.put(vb.getInputs().get(i).getName(), i);
         }
         SimulationEnv.testFMU = new VehicleBatteryFMU();
      }

      final double batteryVoltage = inputs.get("BatteryVoltage");
      final double internalRes = inputs.get("InternalRes");
      final double maxTorque = inputs.get("MaxTorque");
      final double auxload = SimulationEnv.calcAuxload(batteryVoltage, maxTorque);
      final double maxPower = SimulationEnv.calcMaxPower(batteryVoltage, internalRes);

      vb.getInputs().get(inputToIndices.get("Auxload")).setValue(auxload);
      vb.getInputs().get(inputToIndices.get("MaxPower")).setValue(maxPower);

      SimulationEnv.testFMU.setup(auxload, batteryVoltage, internalRes, maxTorque, maxPower);
      SimulationEnv.testFMU.simulate(simulationTime);
      //
      final double totalTractiveEnergy = testFMU.getLast("TotalTractiveEnergy");
      final double totalBatteryLosses = testFMU.getLast("TotalBatteryLosses");
      final double soC = testFMU.getLast("SoC");

      vb.getOutputs().get(outputToIndices.get("TotalTractiveEnergy")).setValue(totalTractiveEnergy);
      vb.getOutputs().get(outputToIndices.get("TotalBatteryLosses")).setValue(totalBatteryLosses);
      vb.getOutputs().get(outputToIndices.get("SoC")).setValue(soC);

      SimulationEnv.testFMU.reset();

      return totalTractiveEnergy;
   }

   public static void init(final int simulationTime) {
      SimulationEnv.simulationTime = simulationTime;
   }

   public static void runSimulation(final FMU fmu, final int seconds) {

   }

   public static SimulationResult runSimulation(final FMU fmu, final int simDuration,
         final Map<String, Double> setInputs) {

   }

}
