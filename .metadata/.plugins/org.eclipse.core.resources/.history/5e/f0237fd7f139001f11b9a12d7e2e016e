package momot.^search

import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import at.ac.tuwien.big.momot.problem.unit.parameter.random.RandomIntegerValue
import fmuvb.demo.RandomDoubleValueFMU
import fmuvb.VehicleBatteryFMU
import java.util.List
import at.ac.tuwien.big.momot.problem.unit.parameter.random.RandomListValue
import fmuvb.demo.FitnessCalculator
import fmumodel.FmumodelPackage
import fmuvb.demo.FMUUtils
import fmuvb.demo.SimulationEnv
import at.ac.tuwien.big.momot.util.MomotUtil
import fmumodel.FMU
import fmuvb.demo.ConfigurationUtils
import java.util.HashMap

var attribute = "simulation"

initialization = {
	FmumodelPackage.eINSTANCE.eClass();
	FMUUtils.initFMUModel("fmu-lib/BEV_5in_9out.fmu");
	SimulationEnv.init(2474); // FMU simulation time
	System.out.println("Search started.");
}

search = {
	model          = {
		file       = "models/FMU.xmi"	
	}
	solutionLength  = 6	

	transformations = {
		modules = [ "transformations/fmu.henshin" ]
		
		parameterValues = {
         "fmu::fmu::setInput::val"  : new RandomDoubleValueFMU()
         "fmu::fmu::setInput::name"  : new RandomListValue(List.of("BatteryVoltage", "InternalRes", "MaxTorque"))
      	}
	}
//   public static double calcAuxload(final double batteryVoltage, final double maxTorque) {
//      return 600 + (batteryVoltage - 340) * 2 + (maxTorque - 500) * 0.75;
//   }
//
//   public static double calcMaxPower(final double batteryVoltage, final double internalRes) {
//      return 100000 - internalRes * 100000 + batteryVoltage * 100;
//   }
	fitness         = {
		preprocess = {
			val root = MomotUtil.getRoot(solution.execute, typeof(FMU))
			val inputs = newImmutableMap(root.input.map[name -> value])
			
			val maxPower = 100000 - inputs.get("InternalRes")*100000 + inputs.get("BatteryVoltage")*100
			val auxload = 600 + (inputs.get("BatteryVoltage")-340) * 2 + (inputs.get("MaxTorque")-500) * 0.75
			solution.setAttribute(attribute, new SimulationEnv(root, 2474, Maps.newImmutableMap('MaxPower' -> maxPower)) )
			//SimulationEnv.runSimulation(root, 2474)
		}
		objectives = {
			
			TotalTractiveEnergy : minimize {SimulationEnv.getTotalTractiveEnergy(root as FMU)}
			TotalBatteryLosses : minimize {SimulationEnv.getTotalBatteryLosses(root as FMU)}
						SoC : maximize {SimulationEnv.getSoC(root as FMU)}
			
		}
	}

	algorithms      = {
		//Random  : moea.createRandomSearch()
		NSGAII  : moea.createNSGAII()
		//NSGAIII : moea.createNSGAIII()
	}
}

experiment = {
	populationSize    = 20
	maxEvaluations    = 300
	nrRuns            = 1
	progressListeners = [ new SeedRuntimePrintListener ]
}

analysis = {
	indicators       = [ hypervolume generationalDistance ]
	significance     = 0.01
	show             = [ aggregateValues statisticalSignificance individualValues ]
	outputFile       = "output/analysis/analysis.txt"
	boxplotDirectory = "output/analysis/"
	printOutput
}

results = {
		

	
	adaptModels = {
		
		
	}
	
	
	objectives = {
		outputFile      = "output/objectives/objective_values.txt"
		printOutput
	}

	solutions  = {
		
		outputFile      = "output/solutions/objective_values.txt"
		outputDirectory = "output/solutions/"
	}

	models     = {
		outputDirectory = "output/models/"
	}
}

finalization = {
	System.out.println("Search finished.");
}
