/**
 */
package tms.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tms.Pump;
import tms.Radiator;
import tms.TmsPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Radiator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tms.impl.RadiatorImpl#getPump <em>Pump</em>}</li>
 *   <li>{@link tms.impl.RadiatorImpl#getId <em>Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RadiatorImpl extends MinimalEObjectImpl.Container implements Radiator {
   /**
    * The cached value of the '{@link #getPump() <em>Pump</em>}' reference.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @see #getPump()
    * @generated
    * @ordered
    */
   protected Pump pump;

   /**
    * The default value of the '{@link #getId() <em>Id</em>}' attribute.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @see #getId()
    * @generated
    * @ordered
    */
   protected static final String ID_EDEFAULT = null;

   /**
    * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @see #getId()
    * @generated
    * @ordered
    */
   protected String id = ID_EDEFAULT;

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected RadiatorImpl() {
      super();
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   protected EClass eStaticClass() {
      return TmsPackage.Literals.RADIATOR;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Pump getPump() {
      if (pump != null && pump.eIsProxy()) {
         InternalEObject oldPump = (InternalEObject)pump;
         pump = (Pump)eResolveProxy(oldPump);
         if (pump != oldPump) {
            if (eNotificationRequired())
               eNotify(new ENotificationImpl(this, Notification.RESOLVE, TmsPackage.RADIATOR__PUMP, oldPump, pump));
         }
      }
      return pump;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public Pump basicGetPump() {
      return pump;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public void setPump(Pump newPump) {
      Pump oldPump = pump;
      pump = newPump;
      if (eNotificationRequired())
         eNotify(new ENotificationImpl(this, Notification.SET, TmsPackage.RADIATOR__PUMP, oldPump, pump));
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public String getId() {
      return id;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public void setId(String newId) {
      String oldId = id;
      id = newId;
      if (eNotificationRequired())
         eNotify(new ENotificationImpl(this, Notification.SET, TmsPackage.RADIATOR__ID, oldId, id));
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object eGet(int featureID, boolean resolve, boolean coreType) {
      switch (featureID) {
         case TmsPackage.RADIATOR__PUMP:
            if (resolve) return getPump();
            return basicGetPump();
         case TmsPackage.RADIATOR__ID:
            return getId();
      }
      return super.eGet(featureID, resolve, coreType);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public void eSet(int featureID, Object newValue) {
      switch (featureID) {
         case TmsPackage.RADIATOR__PUMP:
            setPump((Pump)newValue);
            return;
         case TmsPackage.RADIATOR__ID:
            setId((String)newValue);
            return;
      }
      super.eSet(featureID, newValue);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public void eUnset(int featureID) {
      switch (featureID) {
         case TmsPackage.RADIATOR__PUMP:
            setPump((Pump)null);
            return;
         case TmsPackage.RADIATOR__ID:
            setId(ID_EDEFAULT);
            return;
      }
      super.eUnset(featureID);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean eIsSet(int featureID) {
      switch (featureID) {
         case TmsPackage.RADIATOR__PUMP:
            return pump != null;
         case TmsPackage.RADIATOR__ID:
            return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
      }
      return super.eIsSet(featureID);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public String toString() {
      if (eIsProxy()) return super.toString();

      StringBuilder result = new StringBuilder(super.toString());
      result.append(" (id: ");
      result.append(id);
      result.append(')');
      return result.toString();
   }

} //RadiatorImpl
