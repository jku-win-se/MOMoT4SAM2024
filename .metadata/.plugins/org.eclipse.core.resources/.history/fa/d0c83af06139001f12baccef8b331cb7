// package tms.demo;
//
// import static guru.nidi.graphviz.attribute.Attributes.attr;
// import static guru.nidi.graphviz.attribute.Rank.RankDir.LEFT_TO_RIGHT;
// import static guru.nidi.graphviz.model.Factory.graph;
// import static guru.nidi.graphviz.model.Factory.node;
// import static guru.nidi.graphviz.model.Factory.to;
//
// import at.ac.tuwien.big.moea.SearchAnalysis;
// import at.ac.tuwien.big.moea.SearchExperiment;
// import at.ac.tuwien.big.moea.SearchResultManager;
// import at.ac.tuwien.big.moea.experiment.analyzer.SearchAnalyzer;
// import at.ac.tuwien.big.moea.experiment.executor.listener.SeedRuntimePrintListener;
// import at.ac.tuwien.big.moea.print.IPopulationWriter;
// import at.ac.tuwien.big.moea.print.ISolutionWriter;
// import at.ac.tuwien.big.moea.search.algorithm.EvolutionaryAlgorithmFactory;
// import at.ac.tuwien.big.moea.search.algorithm.LocalSearchAlgorithmFactory;
// import at.ac.tuwien.big.moea.search.algorithm.provider.IRegisteredAlgorithm;
// import at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension;
// import at.ac.tuwien.big.momot.ModuleManager;
// import at.ac.tuwien.big.momot.TransformationResultManager;
// import at.ac.tuwien.big.momot.TransformationSearchOrchestration;
// import at.ac.tuwien.big.momot.problem.solution.TransformationSolution;
// import at.ac.tuwien.big.momot.search.algorithm.operator.mutation.TransformationPlaceholderMutation;
// import at.ac.tuwien.big.momot.search.algorithm.operator.mutation.TransformationVariableMutation;
// import at.ac.tuwien.big.momot.search.fitness.EGraphMultiDimensionalFitnessFunction;
// import at.ac.tuwien.big.momot.search.fitness.IEGraphMultiDimensionalFitnessFunction;
// import at.ac.tuwien.big.momot.search.fitness.dimension.AbstractEGraphFitnessDimension;
// import at.ac.tuwien.big.momot.search.fitness.dimension.TransformationLengthDimension;
// import at.ac.tuwien.big.momot.search.solution.executor.SearchHelper;
// import at.ac.tuwien.big.momot.search.solution.repair.TransformationPlaceholderRepairer;
// import at.ac.tuwien.big.momot.util.MomotUtil;
//
// import java.io.File;
// import java.io.IOException;
// import java.nio.charset.Charset;
// import java.nio.charset.StandardCharsets;
// import java.nio.file.Files;
// import java.nio.file.Path;
// import java.nio.file.Paths;
// import java.util.AbstractMap;
// import java.util.AbstractMap.SimpleEntry;
// import java.util.ArrayList;
// import java.util.Arrays;
// import java.util.List;
// import java.util.Optional;
//
// import org.eclipse.emf.common.util.URI;
// import org.eclipse.emf.ecore.EClass;
// import org.eclipse.emf.ecore.EClassifier;
// import org.eclipse.emf.ecore.EObject;
// import org.eclipse.emf.ecore.util.EcoreUtil;
// import org.eclipse.emf.henshin.interpreter.EGraph;
// import org.moeaframework.algorithm.NSGAII;
// import org.moeaframework.algorithm.RandomSearch;
// import org.moeaframework.core.Population;
// import org.moeaframework.core.operator.TournamentSelection;
// import org.moeaframework.core.operator.TwoPointCrossover;
// import org.moeaframework.util.progress.ProgressListener;
//
// import guru.nidi.graphviz.attribute.Font;
// import guru.nidi.graphviz.attribute.Rank;
// import guru.nidi.graphviz.engine.Format;
// import guru.nidi.graphviz.engine.Graphviz;
// import guru.nidi.graphviz.model.Graph;
// import guru.nidi.graphviz.model.Node;
// import tinycc.Component;
// import tinycc.Connector;
// import tinycc.ConnectorEnd;
// import tinycc.FlowDirection;
// import tinycc.Model;
// import tinycc.Port;
// import tinycc.TinyccPackage;
// import tms.TMSModel;
//
// @SuppressWarnings("all")
// public class TmsMain {
// protected static final String INITIAL_MODEL = "models/TinyCC_input.xmi";
//
// protected static final int SOLUTION_LENGTH = 6;
//
// private static final String S1_NODE_ID = "s1 :S1\n<<component>>";
//
// public static String addNewlineBetweenLowerAndUpper(final String str) {
// final StringBuilder result = new StringBuilder();
// int lastNewlineIndex = -1; // Start from -1 to handle the beginning of the string
//
// for(int i = 0; i < str.length() - 1; i++) {
// result.append(str.charAt(i));
// if(Character.isLowerCase(str.charAt(i)) && Character.isUpperCase(str.charAt(i + 1))) {
// // Check the length of the substring from the last newline (or beginning) to the current position
// if(i - lastNewlineIndex >= 8) {
// result.append('\n');
// lastNewlineIndex = i;
// }
// }
// }
// result.append(str.charAt(str.length() - 1)); // Append the last character
//
// return result.toString();
//
// }
//
// public static void finalization() {
// System.out.println("Search finished.");
// }
//
// public static void initialization() {
//
// rewriteToUriPath(Paths.get("text", "tiny_tms_subs_v2_onlyadd.henshin"), "/tinycc/TinyCC/model/tinycc.ecore",
// "www.jku.at/tinycc");
// TinyccPackage.eINSTANCE.getClass();
// System.out.println("Search started.");
// }
//
// public static void main(final String... args) {
// initialization();
// final TmsMain search = new TmsMain();
// search.performSearch(INITIAL_MODEL, SOLUTION_LENGTH);
// finalization();
// }
//
// private static void rewriteToUriPath(final Path p, final String search, final String replace) {
//
// final Charset charset = StandardCharsets.UTF_8;
//
// String content = null;
// try {
// content = new String(Files.readAllBytes(p), charset);
// } catch(final IOException e1) {
// // TODO Auto-generated catch block
// e1.printStackTrace();
// }
// content = content.replaceAll(search, replace);
// try {
// Files.write(p, content.getBytes(charset));
// } catch(final IOException e) {
// // TODO Auto-generated catch block
// e.printStackTrace();
// }
//
// }
//
// protected final String[] modules = new String[] { "text/tiny_tms_subs_v2_onlyadd.henshin" };
//
// protected final String[] unitsToRemove = new String[] { "tiny_tms_subs_v2_onlyadd::tmsModule::addComponent",
// "tiny_tms_subs_v2_onlyadd::tmsModule::getType", "tiny_tms_subs_v2_onlyadd::tmsModule::checkTypeNotSelectedYet",
// "tiny_tms_subs_v2_onlyadd::tmsModule::getFromInfo" };
//
// protected final int populationSize = 30;
//
// protected final int maxEvaluations = 300;
//
// protected final int nrRuns = 1;
//
// protected String baseName;
//
// protected double significanceLevel = 0.01;
//
// protected IFitnessDimension<TransformationSolution> _createConstraint_0(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("allTypesUsed",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Minimum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createConstraintHelper_0(solution, graph, root);
// }
// };
// }
//
// protected double _createConstraintHelper_0(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return TMSUtils.checkLayoutValidity((Model) root);
// }
//
// protected ProgressListener _createListener_0() {
// final SeedRuntimePrintListener _seedRuntimePrintListener = new SeedRuntimePrintListener();
// return _seedRuntimePrintListener;
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_0(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("Flows",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Maximum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_0(solution, graph, root);
// }
// };
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_1(
// final TransformationSearchOrchestration orchestration) {
// final IFitnessDimension<TransformationSolution> dimension = _createObjectiveHelper_1();
// dimension.setName("SolutionLength");
// dimension.setFunctionType(at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Minimum);
// return dimension;
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_2(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("DistinctComponents",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Maximum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_2(solution, graph, root);
// }
// };
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_3(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("TestFMU",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Minimum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_3(solution, graph, root);
// }
// };
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_4(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("FlowsNeg",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Minimum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_0(solution, graph, root);
// }
// };
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_6(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("FlowCount",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Maximum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_0(solution, graph, root);
// }
// };
// }
//
// protected double _createObjectiveHelper_0(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return TMSUtils.countFlows((Model) root);
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjectiveHelper_1() {
// final TransformationLengthDimension _transformationLengthDimension = new TransformationLengthDimension();
// return _transformationLengthDimension;
// }
//
// protected double _createObjectiveHelper_2(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return TMSUtils.countDistinctUsedComponents((Model) root);
// }
//
// protected double _createObjectiveHelper_3(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return TMSUtils.checkFMU((TMSModel) root);
// }
//
// protected IRegisteredAlgorithm<RandomSearch> _createRegisteredAlgorithm_0(
// final TransformationSearchOrchestration orchestration,
// final EvolutionaryAlgorithmFactory<TransformationSolution> moea,
// final LocalSearchAlgorithmFactory<TransformationSolution> local) {
// final IRegisteredAlgorithm<RandomSearch> _createRandomSearch = moea.createRandomSearch();
// return _createRandomSearch;
// }
//
// protected IRegisteredAlgorithm<NSGAII> _createRegisteredAlgorithm_1(
// final TransformationSearchOrchestration orchestration,
// final EvolutionaryAlgorithmFactory<TransformationSolution> moea,
// final LocalSearchAlgorithmFactory<TransformationSolution> local) {
// final TournamentSelection _tournamentSelection = new TournamentSelection(2);
// final TwoPointCrossover _twoPointCrossover = new TwoPointCrossover(0.8);
// final TransformationPlaceholderMutation _transformationPlaceholderMutation = new TransformationPlaceholderMutation(
// 0.05);
// final SearchHelper _searchHelper = orchestration.getSearchHelper();
// final TransformationVariableMutation _transformationVariableMutation = new TransformationVariableMutation(
// _searchHelper, 0.2);
// final IRegisteredAlgorithm<NSGAII> _createNSGAII = moea.createNSGAII(_tournamentSelection, _twoPointCrossover,
// _transformationPlaceholderMutation, _transformationVariableMutation);
// return _createNSGAII;
//
// }
//
// protected IRegisteredAlgorithm<NSGAII> _createRegisteredAlgorithm_2(
// final TransformationSearchOrchestration orchestration,
// final EvolutionaryAlgorithmFactory<TransformationSolution> moea,
// final LocalSearchAlgorithmFactory<TransformationSolution> local) {
// final IRegisteredAlgorithm<NSGAII> _createNSGAIII = moea.createNSGAIII();
// return _createNSGAIII;
// }
//
// protected void adaptResultModel(final Model a) {
// final Component ch = getComponentById(a, "ch1");
// final Component s2 = getComponentById(a, "s2");
// final Component bs = getComponentById(a, "bs1");
//
// final Component changeable = getSelectedComponent(a);
// changeable.getComponents().addAll(List.of(ch, s2, bs));
//
// final Component b = getSelectedComponentByType(a, "Battery");
// final Component selection = a.getComponents().stream().filter(c -> c.getName().compareTo("changeable") == 0)
// .findFirst().get();
//
// selection.getComponents().addAll(List.of(ch, s2));
// a.getComponents().remove(ch);
// a.getComponents().remove(s2);
//
// final Port bIn = b.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.IN).findFirst().get();
// final SimpleEntry<Connector, ConnectorEnd> ceInPair = a.getConnectors().stream().map(c -> {
// for(final ConnectorEnd end : c.getEnds()) {
// if(end.getPort() == bIn) {
// return new AbstractMap.SimpleEntry<>(c, end);
// }
// }
// return null;
// }).filter(e -> e != null).findFirst().get();
//
// ceInPair.getKey().setName(ch.getName() + "#to#" + ceInPair.getKey().getName().split("#to#")[1]);
// ceInPair.getValue()
// .setPort(ch.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.IN).findFirst().get());
//
// final Port bOut = b.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.OUT).findFirst().get();
// final Optional<SimpleEntry<Connector, ConnectorEnd>> ceOutPair = a.getConnectors().stream().map(c -> {
// for(final ConnectorEnd end : c.getEnds()) {
// if(end.getPort() == bOut) {
// return new AbstractMap.SimpleEntry<>(c, end);
// }
// }
// return null;
// }).filter(e -> e != null).findFirst();
// if(ceOutPair.isPresent()) {
// ceOutPair.get().getKey().setName(ceOutPair.get().getKey().getName().split("#to#")[0] + "#to#" + s2.getName());
// ceOutPair.get().getValue()
// .setPort(s2.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.OUT).findFirst().get());
// }
// final EClassifier cClassifier = TinyccPackage.eINSTANCE.getEClassifier("Connector");
// final EClassifier ceClassifier = TinyccPackage.eINSTANCE.getEClassifier("ConnectorEnd");
//
// final Connector c1 = (Connector) EcoreUtil.create((EClass) cClassifier);
// final ConnectorEnd e1 = (ConnectorEnd) EcoreUtil.create((EClass) ceClassifier);
// final ConnectorEnd e2 = (ConnectorEnd) EcoreUtil.create((EClass) ceClassifier);
// e1.setPort(ch.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.OUT).findFirst().get());
// e2.setPort(b.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.IN).findFirst().get());
// c1.setName(b.getName() + "#to#" + ch.getName());
// c1.getEnds().addAll(List.of(e1, e2));
//
// final Connector c2 = (Connector) EcoreUtil.create((EClass) cClassifier);
// final ConnectorEnd e21 = (ConnectorEnd) EcoreUtil.create((EClass) ceClassifier);
// final ConnectorEnd e22 = (ConnectorEnd) EcoreUtil.create((EClass) ceClassifier);
// e21.setPort(b.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.OUT).findFirst().get());
// e22.setPort(s2.getPorts().stream().filter(p -> p.getDirection() == FlowDirection.IN).findFirst().get());
// c2.setName(s2.getName() + "#to#" + b.getName());
// c2.getEnds().addAll(List.of(e21, e22));
//
// a.getConnectors().addAll(List.of(c1, c2));
// }
//
// protected SearchExperiment<TransformationSolution> createExperiment(
// final TransformationSearchOrchestration orchestration) {
// final SearchExperiment<TransformationSolution> experiment = new SearchExperiment<>(orchestration, maxEvaluations);
// experiment.setNumberOfRuns(nrRuns);
// experiment.addProgressListener(_createListener_0());
// return experiment;
// }
//
// protected IEGraphMultiDimensionalFitnessFunction createFitnessFunction(
// final TransformationSearchOrchestration orchestration) {
// final IEGraphMultiDimensionalFitnessFunction function = new EGraphMultiDimensionalFitnessFunction();
// function.addObjective(_createObjective_0(orchestration));
// function.addObjective(_createObjective_1(orchestration));
// function.addObjective(_createObjective_2(orchestration));
// function.addObjective(_createObjective_4(orchestration));
//
// // function.addObjective(_createObjective_6(orchestration));
//
// // function.addObjective(_createObjective_3(orchestration));
// function.setSolutionRepairer(new TransformationPlaceholderRepairer());
//
// function.addConstraint(_createConstraint_0(orchestration));
// return function;
// }
//
// protected EGraph createInputGraph(final String initialGraph, final ModuleManager moduleManager) {
// final EGraph graph = moduleManager.loadGraph(initialGraph);
// return graph;
// }
//
// protected ModuleManager createModuleManager() {
// final ModuleManager manager = new ModuleManager();
// for(final String module : modules) {
// manager.addModule(URI.createFileURI(new File(module).getPath().toString()).toString());
// }
// manager.removeUnits(unitsToRemove);
// return manager;
// }
//
// protected TransformationSearchOrchestration createOrchestration(final String initialGraph,
// final int solutionLength) {
// final TransformationSearchOrchestration orchestration = new TransformationSearchOrchestration();
// final ModuleManager moduleManager = createModuleManager();
// final EGraph graph = createInputGraph(initialGraph, moduleManager);
// orchestration.setModuleManager(moduleManager);
// orchestration.setProblemGraph(graph);
// orchestration.setSolutionLength(solutionLength);
// orchestration.setFitnessFunction(createFitnessFunction(orchestration));
//
// final EvolutionaryAlgorithmFactory<TransformationSolution> moea = orchestration
// .createEvolutionaryAlgorithmFactory(populationSize);
// final LocalSearchAlgorithmFactory<TransformationSolution> local = orchestration
// .createLocalSearchAlgorithmFactory();
// // orchestration.addAlgorithm("Random", _createRegisteredAlgorithm_0(orchestration, moea, local));
// orchestration.addAlgorithm("NSGAII", _createRegisteredAlgorithm_1(orchestration, moea, local));
// // orchestration.addAlgorithm("NSGAIII", _createRegisteredAlgorithm_2(orchestration, moea, local));
//
// return orchestration;
// }
//
// protected void deriveBaseName(final TransformationSearchOrchestration orchestration) {
// final EObject root = MomotUtil.getRoot(orchestration.getProblemGraph());
// if(root == null || root.eResource() == null || root.eResource().getURI() == null) {
// baseName = getClass().getSimpleName();
// } else {
// baseName = root.eResource().getURI().trimFileExtension().lastSegment();
// }
// }
//
// private String getBlockLabel(final Component b) {
// final String l = b.getName();
//
// return l + " :" + addNewlineBetweenLowerAndUpper(l + " :" + getComponentType(b)).substring(l.length() + 2)
// + "\n<<component>>";
// }
//
// protected Component getComponentById(final Model m, final String id) {
// return m.getComponents().stream().filter(c -> c.getName().compareTo(id) == 0).findFirst().get();
// }
//
// protected Component getComponentByType(final Model m, final String type) {
// return m.getComponents().stream().filter(c -> getComponentType(c).compareTo(type) == 0).findFirst().get();
// }
//
// private String getComponentType(final Component c) {
// return c.getProperties().stream().filter(p -> p.getName().compareTo("type") == 0).findFirst().get().getValue();
// }
//
// protected List<Component> getSelectedAsList(final Model m) {
// return m.getComponents().stream().filter(c -> c.getName().compareTo("changeable") == 0).findFirst().get()
// .getComponents();
// }
//
// protected Component getSelectedComponent(final Model m) {
// return m.getComponents().stream().filter(c -> c.getName().compareTo("changeable") == 0).findFirst().get();
// }
//
// protected Component getSelectedComponentByName(final Model m, final String id) {
// return m.getComponents().stream().filter(c -> c.getName().compareTo("changeable") == 0).findFirst().get()
// .getComponents().stream().filter(c -> c.getName().compareTo(id) == 0).findFirst().get();
// }
//
// protected Component getSelectedComponentByType(final Model m, final String type) {
// return m.getComponents().stream().filter(c -> c.getName().compareTo("changeable") == 0).findFirst().get()
// .getComponents().stream().filter(c -> getComponentType(c).compareTo(type) == 0).findFirst().get();
// }
//
// protected TransformationResultManager handleResults(final SearchExperiment<TransformationSolution> experiment) {
// final ISolutionWriter<TransformationSolution> solutionWriter = experiment.getSearchOrchestration()
// .createSolutionWriter();
// final IPopulationWriter<TransformationSolution> populationWriter = experiment.getSearchOrchestration()
// .createPopulationWriter();
// final TransformationResultManager resultManager = new TransformationResultManager(experiment);
// Population population;
// population = SearchResultManager.createApproximationSet(experiment, (String[]) null);
// System.out.println("- Save objectives of all algorithms to 'output/objectives/objective_values.txt'");
// SearchResultManager.saveObjectives("output/objectives/objective_values.txt", population);
// System.out.println("---------------------------");
// System.out.println("Objectives of all algorithms");
// System.out.println("---------------------------");
// System.out.println(SearchResultManager.printObjectives(population));
//
// population = SearchResultManager.createApproximationSet(experiment, (String[]) null);
// System.out.println("- Save solutions of all algorithms to 'output/solutions/objective_values.txt'");
// SearchResultManager.savePopulation("output/solutions/objective_values.txt", population, populationWriter);
// System.out.println("- Save solutions of all algorithms to 'output/solutions/objective_values.txt'");
// SearchResultManager.saveSolutions("output/solutions/", baseName,
// MomotUtil.asIterables(population, TransformationSolution.class), solutionWriter);
//
// population = SearchResultManager.createApproximationSet(experiment, (String[]) null);
// System.out.println("- Save models of all algorithms to 'output/models/'");
// TransformationResultManager.saveModels("output/models/", baseName, population);
// adaptResultModels(TransformationResultManager.saveModels("output/models/", baseName, population));
// Graphviz.useDefaultEngines();
//
// int solCnt = 0;
// for(final TransformationSolution ts : MomotUtil.asIterables(population, TransformationSolution.class)) {
// final EGraph graph = ts.execute();
// final Model a = (Model) graph.getRoots().get(0);
// adaptResultModel(a);
// final List<Node> nodes = new ArrayList<>();
//
// final List<String> froms = new ArrayList<>();
//
// final List<String> tos = new ArrayList<>();
// for(final Connector c : a.getConnectors()) {
// if(!c.getName().contains("#to#")) {
// continue;
// }
// final String[] fromTo = c.getName().split("#to#");
// froms.add(fromTo[1]);
// tos.add(fromTo[0]);
//
// nodes.add(node(getBlockLabel(getSelectedComponentByName(a, fromTo[0])))
// .link(to(node(getBlockLabel(getSelectedComponentByName(a, fromTo[1]))))));
//
// }
// tos.removeAll(froms);
// for(final String cName : tos) {
// nodes.add(node(getBlockLabel(getSelectedComponentByName(a, cName))).link(to(node(S1_NODE_ID))));
//
// }
// nodes.add(node(getBlockLabel(getSelectedComponentByType(a, "Battery")))
// .link(to(node("bs :BatterySensor\n<<component>>"))));
//
// final Graph g = graph("example1").graphAttr().with(Rank.dir(LEFT_TO_RIGHT))
//
// .graphAttr().with("nodesep", 0.13).graphAttr().with("ranksep", 0.13) // Decrease space between ranks
// .nodeAttr().with(Font.name("arial")).nodeAttr().with("shape", "rectangle").nodeAttr()
// .with("margin", "0.0,0.0") // Decrease padding inside nodes
// .nodeAttr().with(attr("shape", "rectangle")).nodeAttr().with(Font.name("arial")).linkAttr()
// .with("class", "link-class").with(nodes);
//
// try {
// Graphviz.fromGraph(g).width(2100).render(Format.PNG)
// .toFile(new File("output/visuals/layout" + (++solCnt) + ".png"));
// } catch(final IOException e1) {
// e1.printStackTrace();
// }
// }
//
// return resultManager;
// }
//
// protected SearchAnalyzer performAnalysis(final SearchExperiment<TransformationSolution> experiment) {
// final SearchAnalysis analysis = new SearchAnalysis(experiment);
// analysis.setHypervolume(true);
// analysis.setGenerationalDistance(true);
// analysis.setShowAggregate(true);
// analysis.setShowIndividualValues(true);
// analysis.setShowStatisticalSignificance(true);
// analysis.setSignificanceLevel(significanceLevel);
// final SearchAnalyzer searchAnalyzer = analysis.analyze();
// System.out.println("---------------------------");
// System.out.println("Analysis Results");
// System.out.println("---------------------------");
// searchAnalyzer.printAnalysis();
// System.out.println("---------------------------");
// try {
// System.out.println("- Save Analysis to 'output/analysis/analysis.txt'");
// searchAnalyzer.saveAnalysis(new File("output/analysis/analysis.txt"));
// } catch(final IOException e) {
// e.printStackTrace();
// }
// System.out.println("- Save Indicator BoxPlots to 'output/analysis/'");
// searchAnalyzer.saveIndicatorBoxPlots("output/analysis/", baseName);
// return searchAnalyzer;
// }
//
// public void performSearch(final String initialGraph, final int solutionLength) {
// final TransformationSearchOrchestration orchestration = createOrchestration(initialGraph, solutionLength);
// deriveBaseName(orchestration);
// printSearchInfo(orchestration);
// final SearchExperiment<TransformationSolution> experiment = createExperiment(orchestration);
// experiment.run();
// System.out.println("-------------------------------------------------------");
// System.out.println("Analysis");
// System.out.println("-------------------------------------------------------");
// performAnalysis(experiment);
// System.out.println("-------------------------------------------------------");
// System.out.println("Results");
// System.out.println("-------------------------------------------------------");
// handleResults(experiment);
// }
//
// public void printSearchInfo(final TransformationSearchOrchestration orchestration) {
// System.out.println("-------------------------------------------------------");
// System.out.println("Search");
// System.out.println("-------------------------------------------------------");
// System.out.println("InputModel: " + INITIAL_MODEL);
// System.out.println("Objectives: " + orchestration.getFitnessFunction().getObjectiveNames());
// System.out.println("NrObjectives: " + orchestration.getNumberOfObjectives());
// System.out.println("Constraints: " + orchestration.getFitnessFunction().getConstraintNames());
// System.out.println("NrConstraints: " + orchestration.getNumberOfConstraints());
// System.out.println("Transformations: " + Arrays.toString(modules));
// System.out.println("Units: " + orchestration.getModuleManager().getUnits());
// System.out.println("SolutionLength: " + orchestration.getSolutionLength());
// System.out.println("PopulationSize: " + populationSize);
// System.out.println("Iterations: " + maxEvaluations / populationSize);
// System.out.println("MaxEvaluations: " + maxEvaluations);
// System.out.println("AlgorithmRuns: " + nrRuns);
// System.out.println("---------------------------");
// }
// }
