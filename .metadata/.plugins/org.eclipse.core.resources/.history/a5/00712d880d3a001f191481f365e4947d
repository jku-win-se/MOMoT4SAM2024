// package fmuvb.demo;
//
// import at.ac.tuwien.big.moea.SearchAnalysis;
// import at.ac.tuwien.big.moea.SearchExperiment;
// import at.ac.tuwien.big.moea.SearchResultManager;
// import at.ac.tuwien.big.moea.experiment.analyzer.SearchAnalyzer;
// import at.ac.tuwien.big.moea.experiment.executor.listener.SeedRuntimePrintListener;
// import at.ac.tuwien.big.moea.print.IPopulationWriter;
// import at.ac.tuwien.big.moea.print.ISolutionWriter;
// import at.ac.tuwien.big.moea.search.algorithm.EvolutionaryAlgorithmFactory;
// import at.ac.tuwien.big.moea.search.algorithm.LocalSearchAlgorithmFactory;
// import at.ac.tuwien.big.moea.search.algorithm.provider.IRegisteredAlgorithm;
// import at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension;
// import at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType;
// import at.ac.tuwien.big.moea.util.CastUtil;
// import at.ac.tuwien.big.moea.util.FileUtil;
// import at.ac.tuwien.big.momot.ModuleManager;
// import at.ac.tuwien.big.momot.TransformationResultManager;
// import at.ac.tuwien.big.momot.TransformationSearchOrchestration;
// import at.ac.tuwien.big.momot.problem.solution.TransformationSolution;
// import at.ac.tuwien.big.momot.problem.unit.parameter.IParameterValue;
// import at.ac.tuwien.big.momot.problem.unit.parameter.random.RandomListValue;
// import at.ac.tuwien.big.momot.search.fitness.EGraphMultiDimensionalFitnessFunction;
// import at.ac.tuwien.big.momot.search.fitness.IEGraphMultiDimensionalFitnessFunction;
// import at.ac.tuwien.big.momot.search.fitness.dimension.AbstractEGraphFitnessDimension;
// import at.ac.tuwien.big.momot.util.MomotUtil;
//
// import com.opencsv.CSVWriter;
//
// import java.io.BufferedOutputStream;
// import java.io.BufferedReader;
// import java.io.File;
// import java.io.FileNotFoundException;
// import java.io.FileOutputStream;
// import java.io.FileWriter;
// import java.io.IOException;
// import java.io.InputStreamReader;
// import java.io.PrintStream;
// import java.io.UnsupportedEncodingException;
// import java.nio.file.Path;
// import java.util.ArrayList;
// import java.util.Arrays;
// import java.util.List;
// import java.util.Locale;
// import java.util.Map;
// import java.util.stream.Collectors;
// import java.util.stream.Stream;
//
// import org.eclipse.emf.common.util.URI;
// import org.eclipse.emf.ecore.EObject;
// import org.eclipse.emf.henshin.interpreter.EGraph;
// import org.moeaframework.algorithm.NSGAII;
// import org.moeaframework.core.Population;
// import org.moeaframework.core.Solution;
// import org.moeaframework.util.progress.ProgressListener;
//
// import fmuvb.FmuvbPackage;
// import fmuvb.Output;
// import fmuvb.Parameter;
// import fmuvb.VehicleBatteryFMU;
//
// @SuppressWarnings("all")
// public class vbfmu {
// protected static final String INITIAL_MODEL = "models/VehicleBatteryFMU.xmi";
//
//// protected static final int SOLUTION_LENGTH = 3;
//
// public static void finalization() {
// System.out.println("Search finished.");
// }
//
// public static void initialization() {
// FmuvbPackage.eINSTANCE.eClass();
// System.out.println("Search started.");
// FitnessCalculator.init(2474); // FMU simulation time
// }
//
// public static void main(final String... args) {
//
// initialization();
// final vbfmu search = new vbfmu();
// search.performSearch(INITIAL_MODEL, SOLUTION_LENGTH);
// finalization();
// }
//
// protected final String[] modules = new String[] { "transformations/vehicleBatteryFMU.henshin" };
//
// protected final String _parameterValueKey_0 = "vehicleBatteryFMU::vbfmu::setInput::val";
//
// protected final String _parameterValueKey_1 = "vehicleBatteryFMU::vbfmu::setInput::name";
//
// protected final int populationSize = 10;
//
// protected final int maxEvaluations = 1000;
// protected final int nrRuns = 5;
//
// protected String baseName;
//
// protected double significanceLevel = 0.01;
//
// IEGraphMultiDimensionalFitnessFunction function = null;
//
// protected ProgressListener _createListener_0() {
// final SeedRuntimePrintListener _seedRuntimePrintListener = new SeedRuntimePrintListener();
// return _seedRuntimePrintListener;
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_0(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("TotalTractiveEnergy",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Minimum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_0(solution, graph, root);
// }
// };
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_1(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("TotalBatteryLosses",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Minimum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_1(solution, graph, root);
// }
// };
// }
//
// protected IFitnessDimension<TransformationSolution> _createObjective_2(
// final TransformationSearchOrchestration orchestration) {
// return new AbstractEGraphFitnessDimension("SoC",
// at.ac.tuwien.big.moea.search.fitness.dimension.IFitnessDimension.FunctionType.Maximum) {
// @Override
// protected double internalEvaluate(final TransformationSolution solution) {
// final EGraph graph = solution.execute();
// final EObject root = MomotUtil.getRoot(graph);
// return _createObjectiveHelper_2(solution, graph, root);
// }
// };
// }
//
// protected double _createObjectiveHelper_0(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return FitnessCalculator.getTotalTractiveEnergy((VehicleBatteryFMU) root);
// }
//
// protected double _createObjectiveHelper_1(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return FitnessCalculator.getTotalBatteryLosses((VehicleBatteryFMU) root);
// }
//
// protected double _createObjectiveHelper_2(final TransformationSolution solution, final EGraph graph,
// final EObject root) {
// return FitnessCalculator.getSoC((VehicleBatteryFMU) root);
// }
//
// protected IParameterValue<?> _createParameterValue_0() {
// final RandomDoubleValueFMU _randomDoubleValueFMU = new RandomDoubleValueFMU();
// return _randomDoubleValueFMU;
// }
//
// protected IParameterValue<?> _createParameterValue_1() {
// final List<String> _of = List.of("BatteryVoltage", "InternalRes", "MaxTorque");
// final RandomListValue<String> _randomListValue = new RandomListValue<>(_of);
// return _randomListValue;
// }
//
// protected IRegisteredAlgorithm<NSGAII> _createRegisteredAlgorithm_0(
// final TransformationSearchOrchestration orchestration,
// final EvolutionaryAlgorithmFactory<TransformationSolution> moea,
// final LocalSearchAlgorithmFactory<TransformationSolution> local) {
// final IRegisteredAlgorithm<NSGAII> _createNSGAII = moea.createNSGAII();
// return _createNSGAII;
// }
//
// protected void callPyScript(final String scriptName) {
// try {
// // Set the path to your Conda environment activation script
//
// // Set the name of your Conda environment
// final String condaEnvironmentName = Path.of(".", "scripts", "plotting", "python").toString();
//
// // Set the path to your Python script
// final String pythonScriptPath = Path.of(".", "scripts", scriptName).toString();
// // Create a command to activate the Conda environment and run the Python script
//
// // Create a ProcessBuilder
// final ProcessBuilder processBuilder = new ProcessBuilder(condaEnvironmentName, pythonScriptPath);
//
// // Redirect error stream to standard output
// processBuilder.redirectErrorStream(true);
//
// // Start the process
// final Process process = processBuilder.start();
//
// // Read the output of the process
// final BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
// String line;
// while((line = reader.readLine()) != null) {
// System.out.println(line);
// }
//
// // Wait for the process to finish
// final int exitCode = process.waitFor();
// System.out.println("Exit Code: " + exitCode);
//
// } catch(IOException | InterruptedException e) {
// e.printStackTrace();
// }
// }
//
// protected SearchExperiment<TransformationSolution> createExperiment(
// final TransformationSearchOrchestration orchestration) {
// final SearchExperiment<TransformationSolution> experiment = new SearchExperiment<>(orchestration, maxEvaluations);
// experiment.setNumberOfRuns(nrRuns);
// experiment.addProgressListener(_createListener_0());
// return experiment;
// }
//
// protected IEGraphMultiDimensionalFitnessFunction createFitnessFunction(
// final TransformationSearchOrchestration orchestration) {
// function = new EGraphMultiDimensionalFitnessFunction();
// function.addObjective(_createObjective_0(orchestration));
// function.addObjective(_createObjective_1(orchestration));
// function.addObjective(_createObjective_2(orchestration));
// return function;
// }
//
// protected EGraph createInputGraph(final String initialGraph, final ModuleManager moduleManager) {
// final EGraph graph = moduleManager.loadGraph(initialGraph);
// return graph;
// }
//
// protected ModuleManager createModuleManager() {
// final ModuleManager manager = new ModuleManager();
// for(final String module : modules) {
// manager.addModule(URI.createFileURI(new File(module).getPath().toString()).toString());
// }
// manager.setParameterValue(_parameterValueKey_0, _createParameterValue_0());
// manager.setParameterValue(_parameterValueKey_1, _createParameterValue_1());
// return manager;
// }
//
// protected TransformationSearchOrchestration createOrchestration(final String initialGraph,
// final int solutionLength) {
// final TransformationSearchOrchestration orchestration = new TransformationSearchOrchestration();
// final ModuleManager moduleManager = createModuleManager();
// final EGraph graph = createInputGraph(initialGraph, moduleManager);
// orchestration.setModuleManager(moduleManager);
// orchestration.setProblemGraph(graph);
// orchestration.setSolutionLength(solutionLength);
// orchestration.setFitnessFunction(createFitnessFunction(orchestration));
//
// final EvolutionaryAlgorithmFactory<TransformationSolution> moea = orchestration
// .createEvolutionaryAlgorithmFactory(populationSize);
// final LocalSearchAlgorithmFactory<TransformationSolution> local = orchestration
// .createLocalSearchAlgorithmFactory();
// orchestration.addAlgorithm("NSGAII", _createRegisteredAlgorithm_0(orchestration, moea, local));
//
// return orchestration;
// }
//
// protected void deriveBaseName(final TransformationSearchOrchestration orchestration) {
// final EObject root = MomotUtil.getRoot(orchestration.getProblemGraph());
// if(root == null || root.eResource() == null || root.eResource().getURI() == null) {
// baseName = getClass().getSimpleName();
// } else {
// baseName = root.eResource().getURI().trimFileExtension().lastSegment();
// }
// }
//
// protected void generatePlot(final Population p) {
// final List<fmuvb.VehicleBatteryFMU> solutions = new ArrayList<>();
// for(final TransformationSolution ts : MomotUtil.asIterables(p, TransformationSolution.class)) {
// final EGraph graph = ts.execute();
//
// final fmuvb.VehicleBatteryFMU a = (fmuvb.VehicleBatteryFMU) graph.getRoots().get(0);
// solutions.add(a);
// }
//
// }
//
// protected PrintStream getFilePrintStream(final File file) {
// FileUtil.checkDirectory(file.getParentFile());
// try {
// return new PrintStream(new BufferedOutputStream(new FileOutputStream(file)), true, "UTF-8");
// } catch(FileNotFoundException | UnsupportedEncodingException e) {
// System.err.println(e.getMessage());
// return null;
// }
// }
//
// protected TransformationResultManager handleResults(final SearchExperiment<TransformationSolution> experiment) {
// final ISolutionWriter<TransformationSolution> solutionWriter = experiment.getSearchOrchestration()
// .createSolutionWriter();
// final IPopulationWriter<TransformationSolution> populationWriter = experiment.getSearchOrchestration()
// .createPopulationWriter();
// final TransformationResultManager resultManager = new TransformationResultManager(experiment);
// Population population;
// population = SearchResultManager.createApproximationSet(experiment, (String[]) null);
// // generatePlot(population);
// System.out.println("- Save objectives of all algorithms to 'output/objectives/objective_values.txt'");
// SearchResultManager.saveObjectives("output/objectives/objective_values.txt", population);
// this.saveObjectives("scripts/TXT.csv", population);
// this.saveInputsOutputsCsv("scripts/fmu_results.csv", population);
//
// System.out.println("---------------------------");
// System.out.println("Objectives of all algorithms");
// System.out.println("---------------------------");
// System.out.println(SearchResultManager.printObjectives(population));
//
// population = SearchResultManager.createApproximationSet(experiment, (String[]) null);
// System.out.println("- Save solutions of all algorithms to 'output/solutions/objective_values.txt'");
// SearchResultManager.savePopulation("output/solutions/objective_values.txt", population, populationWriter);
// System.out.println("- Save solutions of all algorithms to 'output/solutions/objective_values.txt'");
// SearchResultManager.saveSolutions("output/solutions/", baseName,
// MomotUtil.asIterables(population, TransformationSolution.class), solutionWriter);
//
// population = SearchResultManager.createApproximationSet(experiment, (String[]) null);
// System.out.println("- Save models of all algorithms to 'output/models/'");
// TransformationResultManager.saveModels("output/models/", baseName, population);
//
// callPyScript("fmu_viz.py");
// callPyScript("fmu_simulation_viz.py");
// callPyScript("plot.py");
//
// return resultManager;
// }
//
// protected SearchAnalyzer performAnalysis(final SearchExperiment<TransformationSolution> experiment) {
// final SearchAnalysis analysis = new SearchAnalysis(experiment);
// analysis.setHypervolume(true);
// analysis.setGenerationalDistance(true);
// analysis.setShowAggregate(true);
// analysis.setShowIndividualValues(true);
// analysis.setShowStatisticalSignificance(true);
// analysis.setSignificanceLevel(significanceLevel);
// final SearchAnalyzer searchAnalyzer = analysis.analyze();
// System.out.println("---------------------------");
// System.out.println("Analysis Results");
// System.out.println("---------------------------");
// searchAnalyzer.printAnalysis();
// System.out.println("---------------------------");
// try {
// System.out.println("- Save Analysis to 'output/analysis/analysis.txt'");
// searchAnalyzer.saveAnalysis(new File("output/analysis/analysis.txt"));
// } catch(final IOException e) {
// e.printStackTrace();
// }
// System.out.println("- Save Indicator BoxPlots to 'output/analysis/'");
// searchAnalyzer.saveIndicatorBoxPlots("output/analysis/", baseName);
// return searchAnalyzer;
// }
//
// public void performSearch(final String initialGraph, final int solutionLength) {
// final TransformationSearchOrchestration orchestration = createOrchestration(initialGraph, solutionLength);
// deriveBaseName(orchestration);
// printSearchInfo(orchestration);
// final SearchExperiment<TransformationSolution> experiment = createExperiment(orchestration);
// experiment.run();
// System.out.println("-------------------------------------------------------");
// System.out.println("Analysis");
// System.out.println("-------------------------------------------------------");
// performAnalysis(experiment);
// System.out.println("-------------------------------------------------------");
// System.out.println("Results");
// System.out.println("-------------------------------------------------------");
// handleResults(experiment);
// }
//
// public void printSearchInfo(final TransformationSearchOrchestration orchestration) {
// System.out.println("-------------------------------------------------------");
// System.out.println("Search");
// System.out.println("-------------------------------------------------------");
// System.out.println("InputModel: " + INITIAL_MODEL);
// System.out.println("Objectives: " + orchestration.getFitnessFunction().getObjectiveNames());
// System.out.println("NrObjectives: " + orchestration.getNumberOfObjectives());
// System.out.println("Constraints: " + orchestration.getFitnessFunction().getConstraintNames());
// System.out.println("NrConstraints: " + orchestration.getNumberOfConstraints());
// System.out.println("Transformations: " + Arrays.toString(modules));
// System.out.println("Units: " + orchestration.getModuleManager().getUnits());
// System.out.println("SolutionLength: " + orchestration.getSolutionLength());
// System.out.println("PopulationSize: " + populationSize);
// System.out.println("Iterations: " + maxEvaluations / populationSize);
// System.out.println("MaxEvaluations: " + maxEvaluations);
// System.out.println("AlgorithmRuns: " + nrRuns);
// System.out.println("---------------------------");
// }
//
// protected void saveInputsOutputsCsv(final String file, final Population p) {
// final PrintStream writer = this.getFilePrintStream(new File(file));
//
// final Solution s = p.get(0);
// TransformationSolution ts = CastUtil.asClass(s, TransformationSolution.class);
// EGraph graph = ts.execute();
//
// fmuvb.VehicleBatteryFMU vb = (fmuvb.VehicleBatteryFMU) graph.getRoots().get(0);
//
// for(final String portName : Stream
// .concat(vb.getInputs().stream().map(i -> i.getName()), vb.getOutputs().stream().map(o -> o.getName()))
// .collect(Collectors.toList())) {
// writer.print(portName);
// writer.print(" ");
// }
//
// writer.println("Cost");
//
// for(final Solution solution : p) {
//
// ts = CastUtil.asClass(solution, TransformationSolution.class);
// graph = ts.execute();
// vb = (fmuvb.VehicleBatteryFMU) graph.getRoots().get(0);
// final Map<String, Double> inputs = vb.getInputs().stream()
// .collect(Collectors.toMap(Parameter::getName, Parameter::getValue));
//
// final Map<String, Double> outputs = vb.getOutputs().stream()
// .collect(Collectors.toMap(Output::getName, Output::getValue));
//
// final double batteryVoltage = inputs.get("BatteryVoltage");
// final double internalRes = inputs.get("InternalRes");
// final double maxTorque = inputs.get("MaxTorque");
// final double auxload = FitnessCalculator.calcAuxload(batteryVoltage, maxTorque);
// final double maxPower = FitnessCalculator.calcMaxPower(batteryVoltage, internalRes);
//
// writer.print(String.join(" ",
// vb.getInputs().stream().map(i -> String.valueOf(i.getValue())).collect(Collectors.toList())) + " ");
//
// double val = function.getObjective(function.getObjectiveName(0)).getFunctionType() == FunctionType.Maximum
// ? solution.getObjective(0) * -1
// : solution.getObjective(0);
//
// writer.print(String.format(Locale.US, "%.7f", val));
//
// for(int i = 1; i < solution.getNumberOfObjectives(); i++) {
// writer.print(" ");
//
// val = function.getObjective(function.getObjectiveName(i)).getFunctionType() == FunctionType.Maximum
// ? solution.getObjective(i) * -1
// : solution.getObjective(i);
// writer.print(String.format(Locale.US, "%.7f", val));
// }
// writer.print(" ");
// writer.println(auxload * 2500 + batteryVoltage * 1000 + Math.pow(internalRes * 1000, 2)
// + Math.pow(maxTorque, 2) + maxPower * 10);
// }
//
// if(writer != null) {
// writer.close();
// }
//
// }
//
// protected void saveObjectives(final String file, final Population p) {
// final PrintStream writer = this.getFilePrintStream(new File(file));
//
// writer.println("TotalTractiveEnergy TotalBatteryLosses SoC Cost xLabel");
// int solutionNr = 0;
// for(final Solution solution : p) {
// double val = function.getObjective(function.getObjectiveName(0)).getFunctionType() == FunctionType.Maximum
// ? solution.getObjective(0) * -1
// : solution.getObjective(0);
//
// writer.print(String.format(Locale.US, "%.7f", val));
//
// for(int i = 1; i < solution.getNumberOfObjectives(); i++) {
// writer.print(" ");
//
// val = function.getObjective(function.getObjectiveName(i)).getFunctionType() == FunctionType.Maximum
// ? solution.getObjective(i) * -1
// : solution.getObjective(i);
// writer.print(String.format(Locale.US, "%.7f", val));
// }
// writer.print(" ");
//
// final TransformationSolution ts = CastUtil.asClass(solution, TransformationSolution.class);
//
// final EGraph graph = ts.execute();
// final fmuvb.VehicleBatteryFMU vb = (fmuvb.VehicleBatteryFMU) graph.getRoots().get(0);
// final Map<String, Double> inputs = vb.getInputs().stream()
// .collect(Collectors.toMap(Parameter::getName, Parameter::getValue));
//
// final double batteryVoltage = inputs.get("BatteryVoltage");
// final double internalRes = inputs.get("InternalRes");
// final double maxTorque = inputs.get("MaxTorque");
// final double auxload = FitnessCalculator.calcAuxload(batteryVoltage, maxTorque);
// final double maxPower = FitnessCalculator.calcMaxPower(batteryVoltage, internalRes);
//
// // Simulate again for plots
// final fmu.VehicleBatteryFMU fmu = new fmu.VehicleBatteryFMU();
//
// fmu.setup(auxload, batteryVoltage, internalRes, maxTorque, maxPower);
// fmu.simulate(.1, 2474);
// //
// final List<Double> totalTractiveEnergy = fmu.get("TotalTractiveEnergy");
// final List<Double> totalBatteryLosses = fmu.get("TotalBatteryLosses");
// final List<Double> soC = fmu.get("SoC");
//
// // Specify the file path
// final String filePath = "output/simulations/tte_tbl_soc" + solutionNr + ".csv";
//
// try(final CSVWriter writer2 = new CSVWriter(new FileWriter(filePath))) {
// // Write the header
//
// final List<String> header = vb.getOutputs().stream().map(o -> o.getName()).collect(Collectors.toList());
// header.add(0, "t");
// writer2.writeNext(header.toArray(new String[0]));
//
// // Write the data
// final int size = totalTractiveEnergy.size();
// for(int i = 0; i < size; i++) {
// final String[] row = { String.valueOf((i + 1) * .1),
// i < totalTractiveEnergy.size() ? totalTractiveEnergy.get(i).toString() : "",
// i < totalBatteryLosses.size() ? totalBatteryLosses.get(i).toString() : "",
// i < soC.size() ? soC.get(i).toString() : "" };
// writer2.writeNext(row);
// }
//
// System.out.println("Data written to " + filePath);
// } catch(final IOException e) {
// e.printStackTrace();
// }
//
// writer.print(auxload * 2500 + batteryVoltage * 1000 + Math.pow(internalRes * 1000, 2) + Math.pow(maxTorque, 2)
// + maxPower * 10);
//
// writer.print(" ");
//
// final String xLabel = String.format(Locale.US, "%.3f,%.3f,%.3f,%.3f,%.3f", batteryVoltage, internalRes,
// maxTorque, auxload, maxPower);
// writer.println(xLabel);
//
// solutionNr++;
// }
//
// if(writer != null) {
// writer.close();
// }
//
// }
// }
